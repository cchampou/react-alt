{
  "version": 3,
  "sources": ["../src/hooks/useInputVisibility.ts", "../src/hooks/useKeyPress.ts"],
  "sourcesContent": ["import { useCallback, useMemo, useState } from 'react';\n\nexport type UseInputVisibility = [\n  type: HTMLInputElement['type'],\n  toggleVisibility: () => void,\n];\n\n/**\n * Toggle your text based input to password mode to hide or show the content\n */\nconst useInputVisibility = (\n  clearType: HTMLInputElement['type'],\n): UseInputVisibility => {\n  const [visible, setVisible] = useState(false);\n\n  const toggleVisibility = useCallback(() => {\n    setVisible(!visible);\n  }, [visible]);\n\n  const type = useMemo(() => (visible ? clearType : 'password'), [visible]);\n  return [type, toggleVisibility];\n};\n\nexport default useInputVisibility;\n", "import { useEffect } from 'react';\n\n/**\n * Choose the key you want to respond and pass it an action, a function of any\n * kind.\n * @param action\n * @param keyCode\n */\nconst useKeyPress = (action: () => unknown, keyCode: string): void => {\n  const keyHandler = ({ key }: KeyboardEvent) => {\n    if (typeof action === 'function' && key === keyCode) action();\n  };\n\n  useEffect(() => {\n    addEventListener('keydown', keyHandler);\n    return () => {\n      removeEventListener('keydown', keyHandler);\n    };\n  }, [keyHandler]);\n};\n\nexport default useKeyPress;\n"],
  "mappings": "AAAA,+DAUA,GAAM,GAAqB,AACzB,GACuB,CACvB,GAAM,CAAC,EAAS,GAAc,EAAS,IAEjC,EAAmB,EAAY,IAAM,CACzC,EAAW,CAAC,IACX,CAAC,IAGJ,MAAO,CADM,EAAQ,IAAO,EAAU,EAAY,WAAa,CAAC,IAClD,IAGT,EAAQ,ECvBf,kCAQA,GAAM,GAAc,CAAC,EAAuB,IAA0B,CACpE,GAAM,GAAa,CAAC,CAAE,SAAyB,CAC7C,AAAI,MAAO,IAAW,YAAc,IAAQ,GAAS,KAGvD,EAAU,IACR,kBAAiB,UAAW,GACrB,IAAM,CACX,oBAAoB,UAAW,KAEhC,CAAC,KAGC,EAAQ",
  "names": []
}
